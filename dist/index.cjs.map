{"version":3,"sources":["../src/index.ts","../src/debounce.ts","../src/throttle.ts"],"sourcesContent":["export { debounce } from './debounce';\r\nexport { throttle } from './throttle';","export function debounce(func: Function, delay: number) {\r\n    let debounceTimer: ReturnType<typeof setTimeout>;\r\n\r\n    return function (this: unknown, ...args: any[]) {\r\n        const context = this;\r\n\r\n        clearTimeout(debounceTimer);\r\n        debounceTimer = setTimeout(() => func.apply(context, args), delay);\r\n\r\n        return func.apply(context, args);\r\n    };\r\n}","export const throttle = (func: Function, delay: number) => {\r\n\r\n    // Previously called time of the function\r\n    let prev: number = 0;\r\n    return (...args: any[]) => {\r\n        let now: number = new Date().getTime();\r\n\r\n        // If difference is greater (now - prev, delay)\r\n        // than delay call the function again.\r\n        if (now - prev > delay) {\r\n            prev = now;\r\n\r\n            // \"...\" is the spread\r\n            // operator here \r\n            // returning the function with the \r\n            // array of arguments\r\n            return func(...args);\r\n        }\r\n    }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,SAAS,SAAS,MAAgB,OAAe;AACpD,MAAI;AAEJ,SAAO,YAA4B,MAAa;AAC5C,UAAM,UAAU;AAEhB,iBAAa,aAAa;AAC1B,oBAAgB,WAAW,MAAM,KAAK,MAAM,SAAS,IAAI,GAAG,KAAK;AAEjE,WAAO,KAAK,MAAM,SAAS,IAAI;AAAA,EACnC;AACJ;;;ACXO,IAAM,WAAW,CAAC,MAAgB,UAAkB;AAGvD,MAAI,OAAe;AACnB,SAAO,IAAI,SAAgB;AACvB,QAAI,OAAc,oBAAI,KAAK,GAAE,QAAQ;AAIrC,QAAI,MAAM,OAAO,OAAO;AACpB,aAAO;AAMP,aAAO,KAAK,GAAG,IAAI;AAAA,IACvB;AAAA,EACJ;AACJ;","names":[]}